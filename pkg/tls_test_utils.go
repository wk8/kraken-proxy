package pkg

import (
	"crypto/tls"
	"crypto/x509"
	"io/ioutil"
	"os"
	"path"
	"testing"

	"github.com/stretchr/testify/require"
)

// a TLSInfo and a server signed by that TLSInfo cert/key pairs for test.
const (
	caCert = `-----BEGIN CERTIFICATE-----
MIIDwTCCAqmgAwIBAgIUX0/al5rajt4+zbxOAjHrDUXb4RUwDQYJKoZIhvcNAQEL
BQAwcDELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFjAUBgNVBAcM
DVNhbiBGcmFuY2lzY28xDTALBgNVBAoMBFdpc2gxDjAMBgNVBAsMBUluZnJhMRUw
EwYDVQQDDAw3MTg2ZTE5MjdhNjQwHhcNMjAwOTI0MTgwNTMxWhcNMjMwNjIxMTgw
NTMxWjBwMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UE
BwwNU2FuIEZyYW5jaXNjbzENMAsGA1UECgwEV2lzaDEOMAwGA1UECwwFSW5mcmEx
FTATBgNVBAMMDDcxODZlMTkyN2E2NDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCC
AQoCggEBANMDhui2ueCgnm5MteX1qLCEDdnPim7sgdVXbWIPu+3+cnFNZG+t5ScS
1TQhvAP3D/v5J/1xNRMmdkyV/dBPVqhzSJZ78QSFwNUaC+NTQBPPu1EwyZl5CnMs
HRmT23XovCDpM6fiPs4zyB/ZFcMCfihNqDRwGAFrdNJwsu2ysnI9JKp4SDnpro9/
jLzFl3SHPn/Uo7qYftoJQaBDv/rtUQwgknNuihzxNyhGXbeRCxCzEh2/p5bSmVxf
e0TH5+L0DN9K4fNEqMJ9vOPc00AYvX1vBVaEMOOcDIVyiiscbmhxHSh5VtNn61JH
MR86r5d+AsgakUCOgYLvqERSwbg/jEECAwEAAaNTMFEwHQYDVR0OBBYEFLNNZ6H9
hAlL8VDmbWg5b/CWf8ulMB8GA1UdIwQYMBaAFLNNZ6H9hAlL8VDmbWg5b/CWf8ul
MA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBACOx1MxeEI8oNVgp
KWsXXmMDnjNWYU4hbJw2dIIz24LLGfRxVM+7rrdLGek4fZgOUGmWhZDJTiE4u9nA
aa44yv1jk4JXsq20GlHh/Vxeebah8ZkjKswOpHtYay+Oa57SIeC0ixZdNdAyeWJd
qHnV5dGySASIWUkiRDvPAbSAfXbS0l5W69hZRQpO6c2waPdy+Eit9MLBTY7Qavyv
33AZJj7MWwvvffHp/x/zrxZK7K91lF76cdiG6dn/M2JXRV2dqqcdqK31GU1hrbVB
mfis3I7P6mS59lgM0Hcc+SlURIAloWbsZH61aHUdMqsfgBe1kqkoOnrBFjXhN/G0
N02iITg=
-----END CERTIFICATE-----`

	caKey = `-----BEGIN RSA PRIVATE KEY-----
MIIEogIBAAKCAQEA0wOG6La54KCebky15fWosIQN2c+KbuyB1VdtYg+77f5ycU1k
b63lJxLVNCG8A/cP+/kn/XE1EyZ2TJX90E9WqHNIlnvxBIXA1RoL41NAE8+7UTDJ
mXkKcywdGZPbdei8IOkzp+I+zjPIH9kVwwJ+KE2oNHAYAWt00nCy7bKycj0kqnhI
Oemuj3+MvMWXdIc+f9Sjuph+2glBoEO/+u1RDCCSc26KHPE3KEZdt5ELELMSHb+n
ltKZXF97RMfn4vQM30rh80Sown2849zTQBi9fW8FVoQw45wMhXKKKxxuaHEdKHlW
02frUkcxHzqvl34CyBqRQI6Bgu+oRFLBuD+MQQIDAQABAoIBAB1QEB2jxI5/wYJx
BZO8XIKo1YO8YO6nzCFm07sblG+rORqkNZ+N+JdE9nkXdpbWa1IFepiqcUUHwsdA
ztFxNAiSezLsZL7MFc2EoMIjfnNCGDNfI6I+PkVhi2lSMNpgSkIIIzTfKPpcFyDV
d0BvyDaxEvy11Z/c3Y2eOjzq5f8YXonBbh29qUIvIls71UAkPRD6UlVDjYrr9siY
fZwE8TQos/7c+NDx+v/6qvMR4R8ZCz5V3rIzt624ug1b3fx1bZIKcsjVhuM+Mwp8
xmA3JAYzjzjBPFZgQ3x0V8SJhSAgqUA5ELYx7criDPBSyY4yyZE72pveXetQ5guE
aMevGwECgYEA+2HZxtioYzyeuVT2dyvUOgZPCpZ0gdqNWbyO8vGZ62TskBIp3xxk
wdYFTRHjppbMIsvqbhyOcFhQ/Pz3SAxZ3tdDlDO2dQyMvg0z/rV+FL6LBZyDep8y
dx0yM2/zqlkPSeDp3E3Y4zp9Cs5DgMLMTn0kiFEXV45F4xXG+xXo/S0CgYEA1uPW
+RRwVpNt+HToTrz1rtg+3nB1yxnC8ajJxbYFMMHrWBm0euuMkoKvb6RqsAiwNGYM
MoB/RVHhSJHiTUUvRMRQ9B+aW4GbyQ4A/R4+wgP2viSefOoTX4KTdCzzZ46LZ0aY
c1gLGGEhNnJESj9tGWjz5vmPokKH/RJbg7UDP+UCgYAldbFkJkkBcLkeWQDZRVi8
xM/mfgEikJTbuHN81G/hWgq+dVZz/uEs2V203GOWIYaN8OEgQ3UeXKrE6FVZES4b
POy/Gu2nh5U5hPIolJcTNEm3LlmRXkPA6ELg01/2FItosPFoeNlHEyIrCA2bFGwp
jhBxl9PoojTb4BTkuaEciQKBgFjZQXQhEEWrlWeKJtcPZ+GQBYaBJyL/lsvGRw7Z
MJI1S7JUhnvgUnHtWM4nQ/lezkQMAXUMDhNCRIx1zQS321BqfzJAstis4RWjFaOS
Us5zRxzdFS5+td3ipkb9ovIpTNg5pyThvUyqNEpHupacXOaJr3bLrqifK4zmfzIY
sKxFAoGAQJMXXWluebk6vWpmr6/gHGF8k/E5GvqjVYjv75UBvQRLbhD/5p9PQOyo
iVvQuHTOBLro44gWE7grek4gUh8WEVyWUQMpmHGGSVY8kDIxDI6tCF/rcO7i2m24
uqZ3Wri7iES85oHxXnvq3wQfUYH1Eea8S3T75BrjctefDyMOY5g=
-----END RSA PRIVATE KEY-----`

	serverCert = `-----BEGIN CERTIFICATE-----
MIIDvzCCAqegAwIBAgIJAPR3IcR8uA3xMA0GCSqGSIb3DQEBCwUAMHAxCzAJBgNV
BAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRYwFAYDVQQHDA1TYW4gRnJhbmNp
c2NvMQ0wCwYDVQQKDARXaXNoMQ4wDAYDVQQLDAVJbmZyYTEVMBMGA1UEAwwMNzE4
NmUxOTI3YTY0MB4XDTIwMDkyOTAwNTMwNFoXDTIxMDkyOTAwNTMwNFowajELMAkG
A1UEBhMCVVMxEzARBgNVBAgMCldhc2hpbmd0b24xEDAOBgNVBAcMB1NlYXR0bGUx
DDAKBgNVBAoMA3drODEMMAoGA1UECwwDd2s4MRgwFgYDVQQDDA9sb2NhbGhvc3Qu
bG9jYWwwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCmzvBW5/Hy+0RI
VGxp6h289/x/br6Y1hNubTmvnaLF69fLTmmSvO4KhjRRWyz2iU6+DYDYNHDWCFM9
ydwcFArLWljM5REJsMOC5PRBjFMIDy4gAP4nfFjpMsD1EDwJzhh9ISlxO/ZcZPu4
80SGdlhRwGpyq+3n3weApB5lEQa7jLkS2uzGqByNESYnXY0Ix+IM8IDB+sQxARQx
/UcL81CDOGdcMw3uB/sS/VkJ27k+LMj15ExiVsIonDi48NnKS1yB94k8k8uqg4L1
3CBWDIoIxqZ1E276id+VjGWeu3X5tcHYDs5lk00n9VRLDZdRzFsPxkpb+z11P6nD
SrCkyaMNAgMBAAGjYjBgMB8GA1UdIwQYMBaAFLNNZ6H9hAlL8VDmbWg5b/CWf8ul
MAkGA1UdEwQCMAAwCwYDVR0PBAQDAgTwMCUGA1UdEQQeMByCD2xvY2FsaG9zdC5s
b2NhbIIJbG9jYWxob3N0MA0GCSqGSIb3DQEBCwUAA4IBAQAbMWY9lWly856NEyX+
2bOEv4R9fuv820cq3iRKDWJHvHvcvuW5WyFDlV3uJgybdHeOHKSZ6KP/+iLKAXfH
oLxrN7I+pb5j9sHDsc2Nxxq4Uyf8uo3BvY4dsFBvNMOVmkNL/35VL2DI3K0qHjav
1lEYhgcQgOjkNar7Wz5EZIqsPmlZ6heuvKwAQ5kfdNyT2ek3+Dh7k60EtOxjKxRv
2fB9cBgliZQP7tqZZUEC45mr4xWGtLLDV0BQ+/xtBroI0FBrWjM65NcDl1C5GNL6
Zk5yeZyj9ii2B+Fn92YYsE6XXjk9l1v625WuH2Ih0V0963CPUWUedwL2XPKVEjWk
T+kb
-----END CERTIFICATE-----`

	serverKey = `-----BEGIN RSA PRIVATE KEY-----
MIIEpgIBAAKCAQEAps7wVufx8vtESFRsaeodvPf8f26+mNYTbm05r52ixevXy05p
krzuCoY0UVss9olOvg2A2DRw1ghTPcncHBQKy1pYzOURCbDDguT0QYxTCA8uIAD+
J3xY6TLA9RA8Cc4YfSEpcTv2XGT7uPNEhnZYUcBqcqvt598HgKQeZREGu4y5Etrs
xqgcjREmJ12NCMfiDPCAwfrEMQEUMf1HC/NQgzhnXDMN7gf7Ev1ZCdu5PizI9eRM
YlbCKJw4uPDZyktcgfeJPJPLqoOC9dwgVgyKCMamdRNu+onflYxlnrt1+bXB2A7O
ZZNNJ/VUSw2XUcxbD8ZKW/s9dT+pw0qwpMmjDQIDAQABAoIBAQCR/Z+fkBTTwlG6
tBjGgd5RGwFkTnqFrScIiJPqPZ7OdmFBUHlZsfzsPRTg91lc1EOUVqEjmJIA4Pxp
oZgBAxGHdKUvfnPw9UHH97ZHABdTgGWwIO5PhKcUQhVa5kCFnFkWesWYkxBFQSSG
dHLO9BjMRAlmH09ylmIslnb7oXExBsjij7i8E6PNzztRqLTkpcSACqmw6WtMTcim
ZjNUyrhQwh+/u7BYWSrmAKIoMAmU3KMz6no9i5QNQMHOyde7hFI1XWXe4iYmGVOK
sGdMWjhp/JQpvFWhItNxTfD8jUeTf7MFuXV6mkmD4FxmEHTJ7ST/qkxa/c2qMCz5
mzxCjX7JAoGBAM+KeAQFQeyN+j1Rax4tTetbnMo4AdwyUleBf9rzjk/t59dpqkmT
+1EzpHmNG9tn72LB2C5KLIaBl8K4+oZ+bNXDB9G+gRmTKqs+jnvZKtU/4OXrGB47
7qvBPvj3x9dG8moal9XV9HyfdKbC+ucksA4NHknv68eFRtEaPEy4NSD7AoGBAM3B
ug+KolM7OxwkAhitB4o/LhbpAbKiVY7jJLaE5QUH6y7YxCmxYzDBAilLxP3HyXsW
rlF+EckRzNzVe6peBDAibDwDLuzciIwAltbI38ritUpBA+DvV6LRybbWUqQKrq0B
79sPG69zhrOyoVZJJg2hHuaueyC+cvsgS0TX6F2XAoGBAJdTBkkgMD40E1asS+dX
7y2BweOsTKbqRiGpubjCx2w+MkJduB0n+iHt/qnmGn6y3NfsMR0nVinIygff6kMw
YVjHeKcVOXqVVJJB7ZAd+1470layQQaielbfc3QC7sJn5483zqfK9hX8Cgkht+Hb
XUcRh5kvh4IWClmiwH7L/WkLAoGBAIY01WKrv4NggAaz6fYkbmWbHjntU6Erx3jC
6cBvYF5ustVEqHa1cIhtbDZ5aI1L0jyKJ7uZ6onnJWPpj5cpabvnyAdA4Eu48Qu4
mqqQLYDNbQh47cm688OM6PBsTU0YdqT8PXH6IcnIJdVyL0/zuHFtZZV7u245KxBo
GRBXcAYTAoGBAMDru2FHwvTYGM3fhN/1iJZDcKS394I/kVjTe0nPXoanoj7Bay1J
ekdPqctyedlbBLCNQ3JiUUZxDKq1aLGmKg77zLGPBQlhKrfpphwaefr805TbF2mK
kk3t+A1GaULCWrl7n3ATRvE4uSig8OhkJEUywAX0TKQkm5mKUbN+p/nn
-----END RSA PRIVATE KEY-----`
)

func withTestCAFiles(t *testing.T) (*TLSInfo, func()) {
	return withTempCertAndKey(t, "ca", caCert, caKey)
}

func withTestServerTLSFiles(t *testing.T) (*TLSInfo, func()) {
	return withTempCertAndKey(t, "server", serverCert, serverKey)
}

func withTempCertAndKey(t *testing.T, dirSuffix, cert, key string) (*TLSInfo, func()) {
	tmpDir, err := ioutil.TempDir("", "kraken-proxy-test"+dirSuffix)
	require.NoError(t, err)

	certPath := path.Join(tmpDir, "cert")
	require.NoError(t, ioutil.WriteFile(certPath, []byte(cert), 0600))

	keyPath := path.Join(tmpDir, "key")
	require.NoError(t, ioutil.WriteFile(keyPath, []byte(key), 0600))

	cleanup := func() {
		require.NoError(t, os.RemoveAll(tmpDir))
	}

	return &TLSInfo{
		CertPath: certPath,
		KeyPath:  keyPath,
	}, cleanup
}

func tlsClientConfig(t *testing.T) *tls.Config {
	rootCAs := x509.NewCertPool()
	require.True(t, rootCAs.AppendCertsFromPEM([]byte(caCert)))

	return &tls.Config{
		RootCAs:    rootCAs,
		MinVersion: tls.VersionTLS12,
	}
}
